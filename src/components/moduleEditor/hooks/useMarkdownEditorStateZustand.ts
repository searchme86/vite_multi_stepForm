import { useState, useEffect, useCallback, useRef, useMemo } from 'react';

//====Ïó¨Í∏∞Î∂ÄÌÑ∞ ÏàòÏ†ïÎê®====
// Í∏∞Ï°¥: propsÎ°úÎßå Îç∞Ïù¥ÌÑ∞Î•º Î∞õÎçò Î∞©Ïãù
// ÏÉàÎ°úÏö¥: zustand storeÏóêÏÑúÎèÑ Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏûàÎäî Î∞©Ïãù Ï∂îÍ∞Ä
import { useEditorCoreStore } from '../../../store/editorCore/editorCoreStore';
import { useEditorUIStore } from '../../../store/editorUI/editorUIStore';
//====Ïó¨Í∏∞ÍπåÏßÄ ÏàòÏ†ïÎê®====

interface UseMarkdownEditorStateProps {
  initialContent: string;
  onContentChange: (content: string) => void;
  debounceDelay?: number;
}

//====Ïó¨Í∏∞Î∂ÄÌÑ∞ ÏàòÏ†ïÎê®====
// ÌÉÄÏûÖ ÏïàÏ†ÑÏÑ± Í∞ïÌôî: Î™ÖÏãúÏ†Å ÌÉÄÏûÖ Ï†ïÏùò
type ContentChangeHandler = (content: string) => void;
type ActiveContentGetter = () => string;

// zustand store ÌÉÄÏûÖ Ï†ïÏùò
type EditorCoreStoreType = {
  getParagraphById: (id: string) =>
    | {
        content: string;
        id: string;
        containerId: string | null;
        order: number;
        createdAt: Date;
        updatedAt: Date;
      }
    | undefined;
  updateParagraphContent: (id: string, content: string) => void;
  getContainers: () => any[];
  getParagraphs: () => any[];
  getCompletedContent: () => string;
  getIsCompleted: () => boolean;
  setContainers: (containers: any[]) => void;
  setParagraphs: (paragraphs: any[]) => void;
  setCompletedContent: (content: string) => void;
  setIsCompleted: (completed: boolean) => void;
};

type EditorUIStoreType = {
  getActiveParagraphId: () => string | null;
  getCurrentSubStep: () => string;
  getIsTransitioning: () => boolean;
  getIsPreviewOpen: () => boolean;
  getSelectedParagraphIds: () => string[];
  getTargetContainerId: () => string;
  setActiveParagraphId: (id: string | null) => void;
};

// ÏóêÎü¨ Ï≤òÎ¶¨Î•º ÏúÑÌïú ÏïàÏ†ÑÌïú content Í∞ÄÏ†∏Ïò§Í∏∞ Ìï®Ïàò
const safeGetParagraphContent = (
  editorCoreStore: EditorCoreStoreType,
  paragraphId: string | null,
  fallbackContent: string = ''
): string => {
  try {
    if (!paragraphId) {
      console.log('‚ö†Ô∏è [USE_MD_STATE] ÌôúÏÑ± Îã®ÎùΩ IDÍ∞Ä ÏóÜÏäµÎãàÎã§, Í∏∞Î≥∏Í∞í Î∞òÌôò');
      return fallbackContent;
    }

    const paragraph = editorCoreStore.getParagraphById(paragraphId);
    if (!paragraph) {
      console.warn('‚ö†Ô∏è [USE_MD_STATE] Îã®ÎùΩÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§:', paragraphId);
      return fallbackContent;
    }

    return paragraph.content || fallbackContent;
  } catch (error) {
    console.error('‚ùå [USE_MD_STATE] Îã®ÎùΩ content Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', error);
    return fallbackContent;
  }
};

// ÏóêÎü¨ Ï≤òÎ¶¨Î•º ÏúÑÌïú ÏïàÏ†ÑÌïú content ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
const safeUpdateParagraphContent = (
  editorCoreStore: EditorCoreStoreType,
  paragraphId: string | null,
  content: string
): boolean => {
  try {
    if (!paragraphId) {
      console.log(
        '‚ö†Ô∏è [USE_MD_STATE] ÌôúÏÑ± Îã®ÎùΩ IDÍ∞Ä ÏóÜÏñ¥ ÏóÖÎç∞Ïù¥Ìä∏Î•º Í±¥ÎÑàÎúÅÎãàÎã§'
      );
      return false;
    }

    const paragraph = editorCoreStore.getParagraphById(paragraphId);
    if (!paragraph) {
      console.warn(
        '‚ö†Ô∏è [USE_MD_STATE] ÏóÖÎç∞Ïù¥Ìä∏Ìï† Îã®ÎùΩÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§:',
        paragraphId
      );
      return false;
    }

    editorCoreStore.updateParagraphContent(paragraphId, content);
    console.log('‚úÖ [USE_MD_STATE] Îã®ÎùΩ content ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ:', {
      paragraphId,
      contentLength: content.length,
    });
    return true;
  } catch (error) {
    console.error('‚ùå [USE_MD_STATE] Îã®ÎùΩ content ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', error);
    return false;
  }
};

// ÎåÄÎüâ Ïù¥ÎØ∏ÏßÄ content Ï≤òÎ¶¨Î•º ÏúÑÌïú Î©îÎ™®Î¶¨ ÏµúÏ†ÅÌôî Ìï®Ïàò
const optimizeImageContent = (content: string): string => {
  try {
    // 10MB Ïù¥ÏÉÅÏùò ÌÅ∞ contentÎäî Ïù¥ÎØ∏ÏßÄ ÏïïÏ∂ï Î°úÏßÅ Ï†ÅÏö© (Ïó¨Í∏∞ÏÑúÎäî Î°úÍπÖÎßå)
    if (content.length > 10 * 1024 * 1024) {
      console.warn('üî• [USE_MD_STATE] ÎåÄÏö©Îüâ content Í∞êÏßÄ, ÏµúÏ†ÅÌôî ÌïÑÏöî:', {
        size: Math.round(content.length / 1024 / 1024) + 'MB',
        imageCount: (content.match(/data:image/g) || []).length,
      });
      // Ïã§Ï†ú ÌîÑÎ°úÎçïÏÖòÏóêÏÑúÎäî Ïó¨Í∏∞ÏÑú Ïù¥ÎØ∏ÏßÄ ÏïïÏ∂ïÏù¥ÎÇò Î∂ÑÌï† Ï≤òÎ¶¨
    }
    return content;
  } catch (error) {
    console.error('‚ùå [USE_MD_STATE] content ÏµúÏ†ÅÌôî Ïã§Ìå®:', error);
    return content;
  }
};
//====Ïó¨Í∏∞ÍπåÏßÄ ÏàòÏ†ïÎê®====

//====Ïó¨Í∏∞Î∂ÄÌÑ∞ ÏàòÏ†ïÎê®====
// Í∏∞Ï°¥ Ìï®Ïàò ÏãúÍ∑∏ÎãàÏ≤ò 100% Ïú†ÏßÄÌïòÎ©¥ÏÑú propsÎ•º optionalÎ°ú Î≥ÄÍ≤Ω
// Ïù¥Î†áÍ≤å ÌïòÎ©¥ Í∏∞Ï°¥ ÏΩîÎìúÎäî Í∑∏ÎåÄÎ°ú ÏûëÎèôÌïòÍ≥†, ÏÉàÎ°úÏö¥ ÏΩîÎìúÎäî Îß§Í∞úÎ≥ÄÏàò ÏóÜÏù¥ Ìò∏Ï∂ú Í∞ÄÎä•
export function useMarkdownEditorState(props?: UseMarkdownEditorStateProps) {
  // zustand storeÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ (context ÎåÄÏã† ÏÇ¨Ïö©) - ÌÉÄÏûÖ Î™ÖÏãú
  const editorCoreStore = useEditorCoreStore() as EditorCoreStoreType;
  const editorUIStore = useEditorUIStore() as EditorUIStoreType;

  // ÏÑ±Îä• ÏµúÏ†ÅÌôî: ÌôúÏÑ± Îã®ÎùΩ IDÎ•º Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖòÌïòÏó¨ Î∂àÌïÑÏöîÌïú Î¶¨Î†åÎçîÎßÅ Î∞©ÏßÄ
  const activeParagraphId = useMemo(() => {
    return props ? null : editorUIStore.getActiveParagraphId();
  }, [props, editorUIStore]);

  // ÌÉÄÏûÖ ÏïàÏ†ÑÏÑ± Í∞ïÌôî: Î™ÖÏãúÏ†Å ÌÉÄÏûÖ Ï†ïÏùòÏôÄ Ìï®Íªò ÌôúÏÑ± content Í∞ÄÏ†∏Ïò§Í∏∞
  const getActiveContent: ActiveContentGetter = useCallback(() => {
    if (props) return '';

    return safeGetParagraphContent(editorCoreStore, activeParagraphId, '');
  }, [props, editorCoreStore, activeParagraphId]);

  // ÌÉÄÏûÖ ÏïàÏ†ÑÏÑ± Í∞ïÌôî: Î™ÖÏãúÏ†Å ÌÉÄÏûÖ Ï†ïÏùòÏôÄ Ìï®Íªò content Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
  const getOnContentChange: () => ContentChangeHandler = useCallback(() => {
    if (props?.onContentChange) return props.onContentChange;

    // zustand storeÎ•º ÏÇ¨Ïö©ÌïòÎäî Í≤ΩÏö∞Ïùò content Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
    return (content: string) => {
      // ÎåÄÎüâ Ïù¥ÎØ∏ÏßÄ content ÏµúÏ†ÅÌôî Ï†ÅÏö©
      const optimizedContent = optimizeImageContent(content);

      // ÏïàÏ†ÑÌïú ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ
      const updateSuccess = safeUpdateParagraphContent(
        editorCoreStore,
        activeParagraphId,
        optimizedContent
      );

      if (!updateSuccess) {
        console.warn(
          '‚ö†Ô∏è [USE_MD_STATE] content ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®, Î°úÏª¨ ÏÉÅÌÉúÎßå Ïú†ÏßÄ'
        );
      }
    };
  }, [props, editorCoreStore, activeParagraphId]);

  // ÏÑ±Îä• ÏµúÏ†ÅÌôî: Í∞íÎì§ÏùÑ Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖòÌïòÏó¨ Î∂àÌïÑÏöîÌïú Í≥ÑÏÇ∞ Î∞©ÏßÄ
  const memoizedValues = useMemo(() => {
    const initialContent = props?.initialContent ?? getActiveContent();
    const onContentChange = getOnContentChange();
    const debounceDelay = props?.debounceDelay ?? 300;

    return { initialContent, onContentChange, debounceDelay };
  }, [
    props?.initialContent,
    props?.onContentChange,
    props?.debounceDelay,
    getActiveContent,
    getOnContentChange,
  ]);

  const { initialContent, onContentChange, debounceDelay } = memoizedValues;
  //====Ïó¨Í∏∞ÍπåÏßÄ ÏàòÏ†ïÎê®====

  const [localContent, setLocalContent] = useState<string>(initialContent);
  const previousInitialContent = useRef(initialContent);
  const timeoutRef = useRef<number>();

  //====Ïó¨Í∏∞Î∂ÄÌÑ∞ ÏàòÏ†ïÎê®====
  // ÏóêÎü¨ Ï≤òÎ¶¨ Í∞ïÌôî: initialContent ÎèôÍ∏∞Ìôî Ïãú ÏïàÏ†Ñ Ïû•Ïπò Ï∂îÍ∞Ä
  useEffect(() => {
    try {
      if (
        initialContent !== previousInitialContent.current &&
        initialContent !== localContent
      ) {
        console.log('üîÑ [USE_MD_STATE] Ï¥àÍ∏∞ content ÎèôÍ∏∞Ìôî:', {
          Ïù¥Ï†ÑÍ∏∏Ïù¥: previousInitialContent.current.length,
          ÏÉàÍ∏∏Ïù¥: initialContent.length,
          ÌòÑÏû¨Í∏∏Ïù¥: localContent.length,
        });

        setLocalContent(initialContent);
        previousInitialContent.current = initialContent;
      }
    } catch (error) {
      console.error('‚ùå [USE_MD_STATE] Ï¥àÍ∏∞ content ÎèôÍ∏∞Ìôî Ïã§Ìå®:', error);
    }
  }, [initialContent, localContent]);
  //====Ïó¨Í∏∞ÍπåÏßÄ ÏàòÏ†ïÎê®====

  const stableOnContentChange = useCallback(onContentChange, [onContentChange]);

  //====Ïó¨Í∏∞Î∂ÄÌÑ∞ ÏàòÏ†ïÎê®====
  // ÏóêÎü¨ Ï≤òÎ¶¨ Í∞ïÌôî: content Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨Ïóê ÏïàÏ†Ñ Ïû•Ïπò Ï∂îÍ∞Ä
  const handleLocalChange = useCallback(
    (content: string) => {
      try {
        console.log('üìù [USE_MD_STATE] Î°úÏª¨ ÎÇ¥Ïö© Î≥ÄÍ≤Ω:', {
          contentLength: content.length,
          hasImages: content.includes('!['),
          hasBase64: content.includes('data:image'),
          timestamp: Date.now(),
          Î©îÎ™®Î¶¨ÏÇ¨Ïö©Îüâ: Math.round(content.length / 1024) + 'KB',
        });

        setLocalContent(content);

        // üî• ÌïµÏã¨: Ïù¥ÎØ∏ÏßÄÍ∞Ä Ìè¨Ìï®ÎêòÎ©¥ Ï¶âÏãú Ï†ÑÎã¨, ÏïÑÎãàÎ©¥ ÎîîÎ∞îÏö¥Ïä§
        if (content.includes('![') && content.length > 1000) {
          console.log('üöÄ [USE_MD_STATE] Ïù¥ÎØ∏ÏßÄ Ìè¨Ìï® ÏΩòÌÖêÏ∏† - Ï¶âÏãú Ï†ÑÎã¨');
          if (timeoutRef.current) {
            clearTimeout(timeoutRef.current);
          }

          // ÏïàÏ†ÑÌïú content Î≥ÄÍ≤Ω Ïã§Ìñâ
          try {
            stableOnContentChange(content);
          } catch (error) {
            console.error('‚ùå [USE_MD_STATE] Ï¶âÏãú content Î≥ÄÍ≤Ω Ïã§Ìå®:', error);
          }
        } else {
          console.log('‚è±Ô∏è [USE_MD_STATE] ÏùºÎ∞ò ÌÖçÏä§Ìä∏ - ÎîîÎ∞îÏö¥Ïä§ Ï†ÅÏö©');
          if (timeoutRef.current) {
            clearTimeout(timeoutRef.current);
          }

          timeoutRef.current = setTimeout(() => {
            try {
              console.log('‚è±Ô∏è [USE_MD_STATE] ÎîîÎ∞îÏö¥Ïä§ ÏôÑÎ£å, Ï†ÑÎã¨');
              stableOnContentChange(content);
            } catch (error) {
              console.error(
                '‚ùå [USE_MD_STATE] ÎîîÎ∞îÏö¥Ïä§ content Î≥ÄÍ≤Ω Ïã§Ìå®:',
                error
              );
            }
          }, debounceDelay);
        }
      } catch (error) {
        console.error('‚ùå [USE_MD_STATE] Î°úÏª¨ content Î≥ÄÍ≤Ω Ï≤òÎ¶¨ Ïã§Ìå®:', error);
      }
    },
    [stableOnContentChange, debounceDelay]
  );
  //====Ïó¨Í∏∞ÍπåÏßÄ ÏàòÏ†ïÎê®====

  // ÌÅ¥Î¶∞ÏóÖ - ÏóêÎü¨ Ï≤òÎ¶¨ Í∞ïÌôî
  useEffect(() => {
    return () => {
      try {
        if (timeoutRef.current) {
          clearTimeout(timeoutRef.current);
          console.log('üßπ [USE_MD_STATE] ÎîîÎ∞îÏö¥Ïä§ ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨ ÏôÑÎ£å');
        }
      } catch (error) {
        console.error('‚ùå [USE_MD_STATE] ÌÅ¥Î¶∞ÏóÖ Ïã§Ìå®:', error);
      }
    };
  }, []);

  //====Ïó¨Í∏∞Î∂ÄÌÑ∞ ÏàòÏ†ïÎê®====
  // ÏÑ±Îä• ÏµúÏ†ÅÌôî: propsÍ∞Ä ÏóÜÏùÑ ÎïåÎßå zustand storeÏôÄ ÎèôÍ∏∞Ìôî, Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖò Ï†ÅÏö©
  useEffect(() => {
    if (!props && activeParagraphId) {
      try {
        const newContent = safeGetParagraphContent(
          editorCoreStore,
          activeParagraphId,
          ''
        );

        if (
          newContent !== localContent &&
          newContent !== previousInitialContent.current
        ) {
          console.log('üîÑ [USE_MD_STATE] zustand store ÎèôÍ∏∞Ìôî:', {
            Îã®ÎùΩID: activeParagraphId,
            Ïù¥Ï†ÑÍ∏∏Ïù¥: localContent.length,
            ÏÉàÍ∏∏Ïù¥: newContent.length,
          });

          setLocalContent(newContent);
          previousInitialContent.current = newContent;
        }
      } catch (error) {
        console.error('‚ùå [USE_MD_STATE] zustand store ÎèôÍ∏∞Ìôî Ïã§Ìå®:', error);
      }
    }
  }, [props, activeParagraphId, editorCoreStore, localContent]);

  // ÏÑ±Îä• ÏµúÏ†ÅÌôî: ÌôúÏÑ± Îã®ÎùΩ Î≥ÄÍ≤Ω Í∞êÏßÄ Î∞è ÏûêÎèô content Î°úÎìú
  useEffect(() => {
    if (!props && activeParagraphId) {
      try {
        const newContent = safeGetParagraphContent(
          editorCoreStore,
          activeParagraphId,
          ''
        );

        console.log('üéØ [USE_MD_STATE] ÌôúÏÑ± Îã®ÎùΩ Î≥ÄÍ≤Ω Í∞êÏßÄ:', {
          ÏÉàÎã®ÎùΩID: activeParagraphId,
          contentÍ∏∏Ïù¥: newContent.length,
        });

        setLocalContent(newContent);
        previousInitialContent.current = newContent;
      } catch (error) {
        console.error('‚ùå [USE_MD_STATE] ÌôúÏÑ± Îã®ÎùΩ Î≥ÄÍ≤Ω Ï≤òÎ¶¨ Ïã§Ìå®:', error);
      }
    }
  }, [props, activeParagraphId, editorCoreStore]);
  //====Ïó¨Í∏∞ÍπåÏßÄ ÏàòÏ†ïÎê®====

  //====Ïó¨Í∏∞Î∂ÄÌÑ∞ ÏàòÏ†ïÎê®====
  // ÏÑ±Îä• ÏµúÏ†ÅÌôî: Î∞òÌôòÍ∞í Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖò
  const returnValue = useMemo(() => {
    const baseReturn = {
      localContent,
      handleLocalChange,
      isContentChanged: localContent !== previousInitialContent.current,
    };

    // Í∞úÎ∞ú ÌôòÍ≤Ω Ï≤¥ÌÅ¨ (process ÎåÄÏã† ÏïàÏ†ÑÌïú Î∞©Î≤ï ÏÇ¨Ïö©)
    const isDevelopment =
      typeof window !== 'undefined' &&
      (window.location.hostname === 'localhost' ||
        window.location.hostname === '127.0.0.1' ||
        window.location.hostname.includes('dev'));

    // Ï∂îÍ∞Ä ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥ (Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎßå)
    if (isDevelopment) {
      return {
        ...baseReturn,
        _debug: {
          activeParagraphId,
          contentLength: localContent.length,
          hasImages: localContent.includes('!['),
          usingZustand: !props,
        },
      };
    }

    return baseReturn;
  }, [localContent, handleLocalChange, activeParagraphId, props]);

  return returnValue;
  //====Ïó¨Í∏∞ÍπåÏßÄ ÏàòÏ†ïÎê®====
}

//====Ïó¨Í∏∞Î∂ÄÌÑ∞ ÏàòÏ†ïÎê®====
// üîß Îã§Î•∏ HookÎì§Í≥ºÏùò ÏùºÍ¥ÄÏÑ±ÏùÑ ÏúÑÌïú Ìå®ÌÑ¥ Í∞ÄÏù¥Îìú Ï£ºÏÑù
//
// Ïù¥ Ìå®ÌÑ¥ÏùÄ Îã§Î•∏ ÌõÖÎì§ÏóêÎèÑ Ï†ÅÏö© Í∞ÄÎä•Ìï©ÎãàÎã§:
//
// 1. useImageUpload.ts:
//    - props?: UseImageUploadProps ÌòïÌÉúÎ°ú Î≥ÄÍ≤Ω
//    - zustand storeÏóêÏÑú ÌôúÏÑ± Îã®ÎùΩ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
//    - Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Í≤∞Í≥ºÎ•º ÏûêÎèôÏúºÎ°ú storeÏóê Î∞òÏòÅ
//
// 2. useTiptapEditor.ts:
//    - props?: UseTiptapEditorProps ÌòïÌÉúÎ°ú Î≥ÄÍ≤Ω
//    - ÏóêÎîîÌÑ∞ Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± Ïãú store ÏÉÅÌÉú Î∞òÏòÅ
//    - ÏóêÎîîÌÑ∞ Î≥ÄÍ≤ΩÏÇ¨Ìï≠ÏùÑ ÏûêÎèôÏúºÎ°ú storeÏóê ÎèôÍ∏∞Ìôî
//
// 3. useParagraphActions.ts:
//    - props?: UseParagraphActionsProps ÌòïÌÉúÎ°ú Î≥ÄÍ≤Ω
//    - Îã®ÎùΩ CRUD ÏûëÏóÖÏùÑ store Í∏∞Î∞òÏúºÎ°ú Ïã§Ìñâ
//    - Î°úÏª¨ ÏÉÅÌÉúÏôÄ store ÏÉÅÌÉú ÏûêÎèô ÎèôÍ∏∞Ìôî
//
// Í≥µÌÜµ Ìå®ÌÑ¥:
// - optional propsÎ°ú Í∏∞Ï°¥ Ìò∏ÌôòÏÑ± Ïú†ÏßÄ
// - zustand store Í∏∞Î∞ò fallback Î°úÏßÅ
// - ÏóêÎü¨ Ï≤òÎ¶¨ Î∞è ÏïàÏ†Ñ Ïû•Ïπò Í∞ïÌôî
// - ÏÑ±Îä• ÏµúÏ†ÅÌôî (Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖò, Íµ¨ÎèÖ ÏµúÏ†ÅÌôî)
// - ÌÉÄÏûÖ ÏïàÏ†ÑÏÑ± Í∞ïÌôî
//====Ïó¨Í∏∞ÍπåÏßÄ ÏàòÏ†ïÎê®====
