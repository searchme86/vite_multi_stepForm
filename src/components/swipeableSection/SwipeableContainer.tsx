import React from 'react';
import { Swiper, SwiperSlide } from 'swiper/react';
import { Navigation, Pagination } from 'swiper/modules';
import {
  SwipeableContainerProps,
  SwipeableConfig,
} from './types/swipeableTypes';

import 'swiper/css';
import 'swiper/css/navigation';
import 'swiper/css/pagination';

/**
 * config 객체를 Swiper props로 자동 변환하는 헬퍼 함수
 * - 사용자 친화적인 설정을 Swiper 내부 설정으로 매핑
 * - 타입 안전성 보장 및 기본값 자동 적용
 */
function configToSwiperProps(config: SwipeableConfig = {}) {
  // 기본 모듈 설정 - 필요에 따라 동적으로 추가
  const modules = [];
  if (config.showNavigation) {
    modules.push(Navigation); // 화살표 네비게이션 모듈 추가
  }
  if (config.showPagination) {
    modules.push(Pagination); // 페이지네이션 모듈 추가
  }

  // config 값들을 Swiper props로 변환
  return {
    modules, // 동적으로 구성된 모듈 배열

    // 기본 슬라이드 설정
    slidesPerView: 1, // 한 번에 보여줄 슬라이드 수
    spaceBetween: config.spaceBetween || 0, // 슬라이드 간 간격

    // 터치/드래그 동작 설정
    allowTouchMove: config.touchEnabled !== false, // 터치 이동 허용 (기본: true)
    touchRatio: 1, // 터치 감도
    touchAngle: 45, // 터치 각도 임계값

    // 애니메이션 설정
    speed: config.speed || 300, // 전환 속도 (밀리초)
    effect: 'slide' as const, // 전환 효과 타입

    // 루프 및 초기 설정
    loop: config.allowLoop || false, // 무한 루프 허용
    initialSlide: config.initialSlide || 0, // 초기 슬라이드 인덱스

    // 자동 재생 설정
    autoplay: config.autoplay
      ? {
          delay: typeof config.autoplay === 'number' ? config.autoplay : 3000, // 자동 재생 간격
          disableOnInteraction: true, // 사용자 상호작용 시 일시정지
          pauseOnMouseEnter: true, // 마우스 오버 시 일시정지
        }
      : false,

    // 네비게이션 UI 설정
    navigation: config.showNavigation
      ? {
          nextEl: '.swiper-button-next', // 다음 버튼 선택자
          prevEl: '.swiper-button-prev', // 이전 버튼 선택자
        }
      : false,

    pagination: config.showPagination
      ? {
          el: '.swiper-pagination', // 페이지네이션 컨테이너 선택자
          clickable: true, // 클릭 가능한 페이지네이션
          type: 'bullets' as const, // 불릿 타입 페이지네이션
        }
      : false,

    // 반응형 설정
    breakpoints: {
      0: {
        allowTouchMove: true, // 모바일에서 터치 허용
        touchRatio: 1.2, // 모바일 터치 감도 증가
      },
      768: {
        allowTouchMove: true, // 태블릿에서 터치 허용
        touchRatio: 0.8, // 태블릿 터치 감도 조정
      },
      1024: {
        allowTouchMove: true, // 데스크톱에서도 터치 허용
        touchRatio: 0.6, // 데스크톱 터치 감도 감소
      },
    },
  };
}

/**
 * SwipeableContainer 메인 컴포넌트
 * - React.Children.map으로 children을 안전하게 순회
 * - config 객체를 Swiper props로 자동 변환
 * - Swiper 기본 기능에 충실한 단순한 구조
 * - 웹접근성 및 반응형 디자인 지원
 */
export function SwipeableContainer({
  config = {}, // 기본값으로 빈 객체 제공
  children,
  className = '',
  onSlideChange,
  swiperProps = {}, // 추가 Swiper 설정
}: SwipeableContainerProps) {
  console.log('SwipeableContainer 렌더링:', {
    configProvided: !!config,
    childrenCount: React.Children.count(children),
    hasCustomProps: Object.keys(swiperProps).length > 0,
  });

  // config를 Swiper props로 변환
  const autoGeneratedProps = configToSwiperProps(config);

  // 최종 Swiper 설정 (사용자 정의 props가 우선순위)
  const finalSwiperProps = {
    ...autoGeneratedProps, // config에서 자동 생성된 props
    ...swiperProps, // 사용자가 직접 전달한 props (우선순위 높음)

    // 슬라이드 변경 이벤트 핸들러
    onSlideChange: (swiper: any) => {
      console.log('슬라이드 변경됨:', swiper.activeIndex);
      onSlideChange?.(swiper); // 사용자 콜백 호출
    },
  };

  // 컨테이너 스타일 클래스
  const containerClass = `
    relative w-full h-full
    overflow-hidden
    bg-gray-50/50
    ${className}
  `.trim();

  return (
    <div
      className={containerClass}
      role="region" // 웹접근성: 독립적인 콘텐츠 영역
      aria-label="슬라이드 콘텐츠" // 웹접근성: 영역 설명
      data-swipeable-container="true" // 디버깅용 데이터 속성
      data-total-slides={React.Children.count(children)} // 디버깅용: 총 슬라이드 수
    >
      {/* Swiper 컴포넌트 */}
      <Swiper {...finalSwiperProps}>
        {/* React.Children.map으로 각 child를 SwiperSlide로 감싸기 */}
        {React.Children.map(children, (child, index) => {
          console.log(`슬라이드 ${index} 렌더링 중`);

          return (
            <SwiperSlide
              key={`slide-${index}`}
              className="h-full"
              data-slide-index={index}
              role="tabpanel"
              aria-label={`슬라이드 ${index + 1}`}
            >
              {child}
            </SwiperSlide>
          );
        })}
      </Swiper>
    </div>
  );
}

/**
 * 🎨 SwipeableContainer 사용법 예시:
 *
 * // 1. 기본 사용법 (설정 없음)
 * <SwipeableContainer>
 *   <SwipeSlide>콘텐츠 1</SwipeSlide>
 *   <SwipeSlide>콘텐츠 2</SwipeSlide>
 * </SwipeableContainer>
 *
 * // 2. 간단한 config 사용
 * <SwipeableContainer
 *   config={{
 *     speed: 400,
 *     allowLoop: true,
 *     autoplay: 3000,
 *     showNavigation: true,
 *     showPagination: true
 *   }}
 * >
 *   <SwipeSlide slideId="slide1">
 *     <CustomComponent1 />
 *   </SwipeSlide>
 *   <SwipeSlide slideId="slide2">
 *     <CustomComponent2 />
 *   </SwipeSlide>
 * </SwipeableContainer>
 *
 * // 3. 고급 사용법 (직접 Swiper props 전달)
 * <SwipeableContainer
 *   config={{ speed: 500 }}
 *   swiperProps={{
 *     centeredSlides: true,
 *     coverflowEffect: { rotate: 30 }
 *   }}
 *   onSlideChange={(swiper) => console.log('현재 슬라이드:', swiper.activeIndex)}
 * >
 *   <SwipeSlide>내용</SwipeSlide>
 * </SwipeableContainer>
 */
