// src/types/userInfoTypes.ts

export interface EmailDomain {
  readonly label: string;
  readonly value: string;
}

export interface ImageUploadState {
  readonly imageSrc: string;
  readonly showCropper: boolean;
  readonly cropData: string | null;
}

export interface UserInfoFields {
  readonly nickname: string;
  readonly emailPrefix: string;
  readonly emailDomain: string;
  readonly bio: string;
  readonly userImage: string;
}

export type ToastColor =
  | 'success'
  | 'danger'
  | 'warning'
  | 'primary'
  | 'default';

const isStringRecord = (obj: object): obj is Record<string, unknown> => {
  return typeof obj === 'object' && obj !== null;
};

const hasStringPropertyInternal = (obj: object, key: string): boolean => {
  if (!isStringRecord(obj)) {
    return false;
  }

  return key in obj && typeof obj[key] === 'string';
};

const getStringProperty = (obj: object, key: string): string | undefined => {
  if (hasStringPropertyInternal(obj, key) && isStringRecord(obj)) {
    const value = obj[key];
    return typeof value === 'string' ? value : undefined;
  }
  return undefined;
};

export const isValidEmailDomain = (domain: unknown): domain is EmailDomain => {
  console.log('üîç isValidEmailDomain: Ïù¥Î©îÏùº ÎèÑÎ©îÏù∏ Í≤ÄÏ¶ù ÏãúÏûë', { domain });

  if (typeof domain !== 'object' || domain === null) {
    console.log('‚ùå isValidEmailDomain: Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Í∞ùÏ≤¥ ÌÉÄÏûÖ');
    return false;
  }

  if (!('label' in domain) || !('value' in domain)) {
    console.log('‚ùå isValidEmailDomain: ÌïÑÏàò ÏÜçÏÑ± ÎàÑÎùΩ');
    return false;
  }

  const labelValue = getStringProperty(domain, 'label');
  const valueValue = getStringProperty(domain, 'value');

  if (labelValue === undefined || valueValue === undefined) {
    console.log('‚ùå isValidEmailDomain: ÏÜçÏÑ±Í∞íÏù¥ Î¨∏ÏûêÏó¥Ïù¥ ÏïÑÎãò');
    return false;
  }

  if (labelValue.trim().length === 0 || valueValue.trim().length === 0) {
    console.log('‚ùå isValidEmailDomain: Îπà Î¨∏ÏûêÏó¥ Í∞êÏßÄ');
    return false;
  }

  console.log('‚úÖ isValidEmailDomain: Í≤ÄÏ¶ù ÌÜµÍ≥º');
  return true;
};

export const isValidImageFile = (file: unknown): file is File => {
  console.log('üîç isValidImageFile: Ïù¥ÎØ∏ÏßÄ ÌååÏùº Í≤ÄÏ¶ù ÏãúÏûë', { file });

  if (!(file instanceof File)) {
    console.log('‚ùå isValidImageFile: File Ïù∏Ïä§ÌÑ¥Ïä§Í∞Ä ÏïÑÎãò');
    return false;
  }

  const { type: fileType } = file;
  const isImageType = fileType.startsWith('image/');

  if (!isImageType) {
    console.log('‚ùå isValidImageFile: Ïù¥ÎØ∏ÏßÄ ÌÉÄÏûÖÏù¥ ÏïÑÎãò', { fileType });
    return false;
  }

  console.log('‚úÖ isValidImageFile: Í≤ÄÏ¶ù ÌÜµÍ≥º', { fileType });
  return true;
};

export const isNonEmptyString = (value: unknown): value is string => {
  console.log('üîç isNonEmptyString: ÎπÑÏñ¥ÏûàÏßÄ ÏïäÏùÄ Î¨∏ÏûêÏó¥ Í≤ÄÏ¶ù', { value });

  if (typeof value !== 'string') {
    console.log('‚ùå isNonEmptyString: Î¨∏ÏûêÏó¥ ÌÉÄÏûÖÏù¥ ÏïÑÎãò');
    return false;
  }

  const trimmedValue = value.trim();
  const isNonEmpty = trimmedValue.length > 0;

  if (!isNonEmpty) {
    console.log('‚ùå isNonEmptyString: Îπà Î¨∏ÏûêÏó¥');
    return false;
  }

  console.log('‚úÖ isNonEmptyString: Í≤ÄÏ¶ù ÌÜµÍ≥º');
  return true;
};

const isValidColorValue = (color: string): color is ToastColor => {
  const validColors: readonly string[] = [
    'success',
    'danger',
    'warning',
    'primary',
    'default',
  ];

  return validColors.includes(color);
};

export const isValidToastColor = (color: unknown): color is ToastColor => {
  console.log('üîç isValidToastColor: ÌÜ†Ïä§Ìä∏ ÏÉâÏÉÅ Í≤ÄÏ¶ù', { color });

  if (typeof color !== 'string') {
    console.log('‚ùå isValidToastColor: Î¨∏ÏûêÏó¥ ÌÉÄÏûÖÏù¥ ÏïÑÎãò');
    return false;
  }

  const isValidColor = isValidColorValue(color);

  if (!isValidColor) {
    console.log('‚ùå isValidToastColor: Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÏÉâÏÉÅÍ∞í');
    return false;
  }

  console.log('‚úÖ isValidToastColor: Í≤ÄÏ¶ù ÌÜµÍ≥º');
  return true;
};

export const isStringValue = (value: unknown): value is string => {
  return typeof value === 'string';
};

export const ensureStringValue = (value: unknown, fallback = ''): string => {
  if (isStringValue(value)) {
    return value;
  }

  console.log('‚ö†Ô∏è ensureStringValue: fallback Í∞í ÏÇ¨Ïö©', {
    originalValue: value,
    fallback,
  });
  return fallback;
};

const getAccurateType = (value: unknown): string => {
  console.log('üîç getAccurateType: Ï†ïÌôïÌïú ÌÉÄÏûÖ Í∞êÏßÄ ÏãúÏûë', { value });

  if (value === null) {
    console.log('‚úÖ getAccurateType: null ÌÉÄÏûÖ Í∞êÏßÄ');
    return 'null';
  }

  if (Array.isArray(value)) {
    console.log('‚úÖ getAccurateType: array ÌÉÄÏûÖ Í∞êÏßÄ');
    return 'array';
  }

  if (value instanceof Date) {
    console.log('‚úÖ getAccurateType: date ÌÉÄÏûÖ Í∞êÏßÄ');
    return 'date';
  }

  if (value instanceof File) {
    console.log('‚úÖ getAccurateType: file ÌÉÄÏûÖ Í∞êÏßÄ');
    return 'file';
  }

  if (typeof value === 'function') {
    console.log('‚úÖ getAccurateType: function ÌÉÄÏûÖ Í∞êÏßÄ');
    return 'function';
  }

  const basicType = typeof value;

  if (basicType === 'object') {
    if (
      value &&
      (value.constructor === Object ||
        Object.getPrototypeOf(value) === Object.prototype)
    ) {
      console.log('‚úÖ getAccurateType: object ÌÉÄÏûÖ Í∞êÏßÄ');
      return 'object';
    }
    console.log('‚úÖ getAccurateType: object ÌÉÄÏûÖ Í∞êÏßÄ (Í∏∞ÌÉÄ Í∞ùÏ≤¥)');
    return 'object';
  }

  console.log('‚úÖ getAccurateType: Í∏∞Î≥∏ ÌÉÄÏûÖ Í∞êÏßÄ', { basicType });
  return basicType;
};

const getValuePreview = (value: unknown): string => {
  try {
    if (Array.isArray(value)) {
      const { length: arrayLength } = value;
      return `Array(${arrayLength})`;
    }

    if (typeof value === 'object' && value !== null) {
      const keys = Object.keys(value);
      const { length: keysLength } = keys;
      const previewKeys = keys.slice(0, 3).join(', ');
      const hasMoreKeys = keysLength > 3 ? '...' : '';
      return `Object{${previewKeys}${hasMoreKeys}}`;
    }

    if (typeof value === 'string') {
      const { length: stringLength } = value;
      const preview = value.slice(0, 20);
      const hasMoreChars = stringLength > 20 ? '...' : '';
      return `"${preview}${hasMoreChars}"`;
    }

    return String(value);
  } catch (error) {
    console.log('‚ö†Ô∏è getValuePreview: Í∞í ÎØ∏Î¶¨Î≥¥Í∏∞ ÏÉùÏÑ± Ïã§Ìå®', { error });
    return '[Î≥µÏû°Ìïú Í∞ùÏ≤¥]';
  }
};

export const debugTypeCheck = (value: unknown, expectedType: string): void => {
  console.log('üîß debugTypeCheck: ÌÉÄÏûÖ Í≤ÄÏ¶ù ÏãúÏûë', { value, expectedType });

  if (value === null || value === undefined) {
    const actualType = value === null ? 'null' : 'undefined';

    if (expectedType !== 'null' && expectedType !== 'undefined') {
      console.warn(
        `‚ö†Ô∏è ÌÉÄÏûÖ Î∂àÏùºÏπò Í∞êÏßÄ: {value: ${value}, expectedType: '${expectedType}', actualType: '${actualType}', suggestion: 'null/undefined Í∞íÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî.'}`
      );
    }
    return;
  }

  const actualType = getAccurateType(value);
  const expectedTypeLower = expectedType.toLowerCase();
  const actualTypeLower = actualType.toLowerCase();

  console.log('üîß debugTypeCheck: ÌÉÄÏûÖ ÎπÑÍµê', {
    expectedTypeLower,
    actualTypeLower,
  });

  if (
    expectedTypeLower === 'array' &&
    (actualTypeLower === 'array' || actualTypeLower === 'object')
  ) {
    console.log('‚úÖ debugTypeCheck: Array ÌÉÄÏûÖ ÌóàÏö©');
    return;
  }

  if (expectedTypeLower === 'object' && actualTypeLower === 'array') {
    const valuePreview = getValuePreview(value);
    console.warn(
      `‚ö†Ô∏è ÌÉÄÏûÖ Î∂àÏùºÏπò Í∞êÏßÄ: {value: ${valuePreview}, expectedType: '${expectedType}', actualType: '${actualType}', suggestion: 'ÏàúÏàò Í∞ùÏ≤¥Í∞Ä ÌïÑÏöîÌïòÏßÄÎßå Î∞∞Ïó¥Ïù¥ Ï†ÑÎã¨ÎêòÏóàÏäµÎãàÎã§.'}`
    );
    return;
  }

  if (expectedTypeLower !== actualTypeLower) {
    const valuePreview = getValuePreview(value);
    console.warn(
      `‚ö†Ô∏è ÌÉÄÏûÖ Î∂àÏùºÏπò Í∞êÏßÄ: {value: ${valuePreview}, expectedType: '${expectedType}', actualType: '${actualType}', suggestion: 'Í∞íÏùÑ ${expectedType} ÌÉÄÏûÖÏúºÎ°ú Î≥ÄÌôòÌïòÍ±∞ÎÇò ÌÉÄÏûÖ Í≤ÄÏ¶ùÏùÑ Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî.'}`
    );
    return;
  }

  console.log('‚úÖ debugTypeCheck: ÌÉÄÏûÖ Í≤ÄÏ¶ù ÌÜµÍ≥º');
};

export const isObject = (value: unknown): value is object => {
  return typeof value === 'object' && value !== null;
};

export const isNonNullObject = <T extends object>(
  value: unknown
): value is T => {
  return isObject(value);
};

export const hasProperty = <K extends string>(
  obj: object,
  key: K
): obj is object & Record<K, unknown> => {
  return key in obj;
};

export const hasStringProperty = <K extends string>(
  obj: object,
  key: K
): obj is object & Record<K, string> => {
  if (!hasProperty(obj, key)) {
    return false;
  }

  if (!isStringRecord(obj)) {
    return false;
  }

  const value = obj[key];
  return typeof value === 'string';
};

export const ensureValidToastColor = (color: unknown): ToastColor => {
  if (isValidToastColor(color)) {
    return color;
  }

  const fallbackColor: ToastColor = 'default';
  console.log('‚ö†Ô∏è ensureValidToastColor: Í∏∞Î≥∏ ÏÉâÏÉÅ ÏÇ¨Ïö©', {
    originalColor: color,
    fallbackColor,
  });
  return fallbackColor;
};
