// blogMediaStep/imageGallery/hooks/viewBuilder/useImageViewBuilder.ts - ImageGallery Ïª¥Ìè¨ÎÑåÌä∏

import { useCallback, useMemo } from 'react';
import { useImageGalleryStore } from '../../../../../../../../store/imageGallery/imageGalleryStore';
import { useBlogMediaStepState } from '../../../hooks/useBlogMediaStepState';
import {
  calculateImageSelection,
  createGalleryViewConfig,
  validateViewBuilderSelection,
  generateSuccessMessage,
  resetViewBuilderSelection,
} from '../../utils/viewBuilderUtils.ts';

import { processImageFiles, ImageFileInfo } from '../../utils/galleryUtils';

export interface ViewBuilderResult {
  safeImageViewConfig: ReturnType<
    typeof useImageGalleryStore
  >['getImageViewConfig'];
  filteredAndSortedImages: ImageFileInfo[];
  handleImageClick: (imageUrl: string) => void;
  resetSelection: () => void;
  updateColumns: (columns: number) => void;
  handleAddToPreview: () => void;
  isImageSelected: (imageUrl: string) => boolean;
}

export const useImageViewBuilder = (
  view: 'grid' | 'masonry',
  sortBy: 'index' | 'name' | 'size',
  sortOrder: 'asc' | 'desc'
): ViewBuilderResult => {
  console.log('üîß useImageViewBuilder ÌõÖ Ï¥àÍ∏∞Ìôî:', { view, sortBy, sortOrder });

  const imageViewConfig = useImageGalleryStore((state) =>
    state.getImageViewConfig()
  );
  const updateImageViewConfig = useImageGalleryStore(
    (state) => state.updateImageViewConfig
  );
  const addCustomGalleryView = useImageGalleryStore(
    (state) => state.addCustomGalleryView
  );

  const { formValues, addToast } = useBlogMediaStepState();
  const { media, mainImage, sliderImages } = formValues;

  const safeImageViewConfig = useMemo(() => {
    console.log('üîß safeImageViewConfig Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖò Í≥ÑÏÇ∞');

    const config = imageViewConfig || {
      selectedImages: [],
      clickOrder: [],
      layout: {
        columns: 3,
        gridType: 'grid' as const,
      },
      filter: 'available' as const,
    };

    console.log('‚úÖ safeImageViewConfig Í≤∞Í≥º:', {
      selectedCount: config.selectedImages.length,
      columns: config.layout.columns,
    });

    return config;
  }, [imageViewConfig]);

  const filteredAndSortedImages = useMemo(() => {
    console.log('üîß filteredAndSortedImages Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖò Í≥ÑÏÇ∞');

    const result = processImageFiles(
      media,
      mainImage,
      sliderImages,
      sortBy,
      sortOrder
    );

    console.log('‚úÖ filteredAndSortedImages Í≤∞Í≥º:', {
      totalCount: result.totalCount,
      actualCount: result.images.length,
    });

    return result.images;
  }, [media, mainImage, sliderImages, sortBy, sortOrder]);

  const handleImageClick = useCallback(
    (imageUrl: string) => {
      console.log('üîß handleImageClick Ìò∏Ï∂ú:', {
        imageUrl: imageUrl.slice(0, 30) + '...',
      });

      if (!updateImageViewConfig) {
        console.log('‚ö†Ô∏è updateImageViewConfig Ìï®ÏàòÍ∞Ä ÏóÜÏùå');
        return;
      }

      const selectionUpdate = calculateImageSelection(
        safeImageViewConfig.selectedImages,
        safeImageViewConfig.clickOrder,
        imageUrl
      );

      updateImageViewConfig(selectionUpdate);

      console.log('‚úÖ handleImageClick ÏôÑÎ£å:', {
        selectedCount: selectionUpdate.selectedImages.length,
        action: safeImageViewConfig.selectedImages.includes(imageUrl)
          ? 'removed'
          : 'added',
      });
    },
    [updateImageViewConfig, safeImageViewConfig]
  );

  const resetSelection = useCallback(() => {
    console.log('üîß resetSelection Ìò∏Ï∂ú');

    if (!updateImageViewConfig) {
      console.log('‚ö†Ô∏è updateImageViewConfig Ìï®ÏàòÍ∞Ä ÏóÜÏùå');
      return;
    }

    const resetState = resetViewBuilderSelection();
    updateImageViewConfig(resetState);

    addToast({
      title: 'ÏÑ†ÌÉù Ï¥àÍ∏∞Ìôî',
      description: 'Î™®Îì† ÏÑ§Ï†ïÏù¥ Ï¥àÍ∏∞ ÏÉÅÌÉúÎ°ú ÎêòÎèåÏïÑÍ∞îÏäµÎãàÎã§.',
      color: 'success',
    });

    console.log('‚úÖ resetSelection ÏôÑÎ£å');
  }, [updateImageViewConfig, addToast]);

  const updateColumns = useCallback(
    (columns: number) => {
      console.log('üîß updateColumns Ìò∏Ï∂ú:', { columns });

      if (!updateImageViewConfig) {
        console.log('‚ö†Ô∏è updateImageViewConfig Ìï®ÏàòÍ∞Ä ÏóÜÏùå');
        return;
      }

      updateImageViewConfig({
        layout: {
          ...safeImageViewConfig.layout,
          columns,
        },
      });

      console.log('‚úÖ updateColumns ÏôÑÎ£å:', { columns });
    },
    [updateImageViewConfig, safeImageViewConfig]
  );

  const handleAddToPreview = useCallback(() => {
    console.log('üîß handleAddToPreview Ìò∏Ï∂ú:', {
      selectedCount: safeImageViewConfig.selectedImages.length,
    });

    if (!validateViewBuilderSelection(safeImageViewConfig.selectedImages)) {
      addToast({
        title: 'Ïù¥ÎØ∏ÏßÄÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî',
        description: 'ÎØ∏Î¶¨Î≥¥Í∏∞Ïóê Ï∂îÍ∞ÄÌï† Ïù¥ÎØ∏ÏßÄÎ•º Î®ºÏ†Ä ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.',
        color: 'warning',
      });
      console.log('‚ö†Ô∏è ÏÑ†ÌÉùÎêú Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÜÏùå');
      return;
    }

    const galleryConfig = createGalleryViewConfig(
      safeImageViewConfig.selectedImages,
      safeImageViewConfig.clickOrder,
      safeImageViewConfig.layout.columns,
      view
    );

    if (addCustomGalleryView) {
      addCustomGalleryView(galleryConfig);
    }

    const successMessage = generateSuccessMessage(
      safeImageViewConfig.selectedImages.length,
      view
    );

    addToast({
      title: 'Í∞§Îü¨Î¶¨ Î∑∞ Ï∂îÍ∞Ä ÏôÑÎ£å',
      description: successMessage,
      color: 'success',
    });

    resetSelection();

    console.log('‚úÖ handleAddToPreview ÏôÑÎ£å:', {
      galleryId: galleryConfig.id,
      selectedCount: safeImageViewConfig.selectedImages.length,
      view,
    });
  }, [
    safeImageViewConfig,
    view,
    addCustomGalleryView,
    addToast,
    resetSelection,
  ]);

  const isImageSelected = useCallback(
    (imageUrl: string): boolean => {
      console.log('üîß isImageSelected Ìò∏Ï∂ú:', {
        imageUrl: imageUrl.slice(0, 30) + '...',
      });

      const isSelected = safeImageViewConfig.selectedImages.includes(imageUrl);

      console.log('‚úÖ isImageSelected Í≤∞Í≥º:', { isSelected });
      return isSelected;
    },
    [safeImageViewConfig.selectedImages]
  );

  console.log('‚úÖ useImageViewBuilder Ï¥àÍ∏∞Ìôî ÏôÑÎ£å:', {
    selectedCount: safeImageViewConfig.selectedImages.length,
    filteredCount: filteredAndSortedImages.length,
    view,
    timestamp: new Date().toLocaleTimeString(),
  });

  return {
    safeImageViewConfig,
    filteredAndSortedImages,
    handleImageClick,
    resetSelection,
    updateColumns,
    handleAddToPreview,
    isImageSelected,
  };
};
