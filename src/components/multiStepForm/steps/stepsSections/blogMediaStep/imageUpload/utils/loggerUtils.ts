// üìÅ imageUpload/utils/loggerUtils.ts

type LogLevel = 'debug' | 'info' | 'warn' | 'error';

interface LogOptions {
  level: LogLevel;
  category: string;
  data?: Record<string, unknown>;
  timestamp?: boolean;
}

interface LoggerInterface {
  debug: (message: string, data?: Record<string, unknown>) => void;
  info: (message: string, data?: Record<string, unknown>) => void;
  warn: (message: string, data?: Record<string, unknown>) => void;
  error: (message: string, data?: Record<string, unknown>) => void;
}

const LOG_LEVELS: Record<LogLevel, number> = {
  debug: 0,
  info: 1,
  warn: 2,
  error: 3,
};

// ÌôòÍ≤ΩÏóê Îî∞Î•∏ Î°úÍ∑∏ Î†àÎ≤® ÏÑ§Ï†ï
const getCurrentLogLevel = (): LogLevel => {
  // Î∏åÎùºÏö∞Ï†Ä ÌôòÍ≤ΩÏóêÏÑú Í∞úÎ∞ú/ÌîÑÎ°úÎçïÏÖò Íµ¨Î∂Ñ
  const isDevelopment =
    typeof window !== 'undefined' &&
    (window.location?.hostname === 'localhost' ||
      window.location?.hostname === '127.0.0.1' ||
      window.location?.hostname.includes('dev'));

  const isProduction = !isDevelopment;

  console.log('üîß [LOGGER] ÌôòÍ≤Ω ÏÑ§Ï†ï:', {
    isDevelopment,
    isProduction,
    hostname:
      typeof window !== 'undefined' ? window.location?.hostname : 'server',
    timestamp: new Date().toLocaleTimeString(),
  });

  // ÌîÑÎ°úÎçïÏÖòÏóêÏÑúÎäî warn Ïù¥ÏÉÅÎßå, Í∞úÎ∞úÏóêÏÑúÎäî debug Ìè¨Ìï® Î™®Îëê
  return isProduction ? 'warn' : 'debug';
};

const CURRENT_LOG_LEVEL = getCurrentLogLevel();

export const createLogger = (defaultCategory: string): LoggerInterface => {
  const shouldLogLevel = (level: LogLevel): boolean => {
    const currentLevelValue = LOG_LEVELS[CURRENT_LOG_LEVEL] ?? LOG_LEVELS.warn;
    const requestedLevelValue = LOG_LEVELS[level] ?? LOG_LEVELS.error;

    return requestedLevelValue >= currentLevelValue;
  };

  const formatLogMessage = (message: string, options: LogOptions): string => {
    const { category, timestamp = true } = options;
    const timeStamp = timestamp ? new Date().toLocaleTimeString() : '';
    const categoryUpper = category.toUpperCase();

    return `[${categoryUpper}] ${message} ${timeStamp}`;
  };

  const createLogFunction = (
    level: LogLevel,
    icon: string,
    consoleMethod: 'log' | 'warn' | 'error'
  ) => {
    return (message: string, data?: Record<string, unknown>) => {
      if (!shouldLogLevel(level)) {
        return;
      }

      const formattedMessage = formatLogMessage(message, {
        level,
        category: defaultCategory,
        data,
      });

      const logOutput = `${icon} ${formattedMessage}`;
      const logData = data ?? {};

      // Íµ¨Ï°∞Î∂ÑÌï¥Ìï†ÎãπÏúºÎ°ú console Î©îÏÑúÎìú Ï†ëÍ∑º
      const { [consoleMethod]: logMethod } = console;

      if (typeof logMethod === 'function') {
        if (Object.keys(logData).length > 0) {
          logMethod(logOutput, logData);
        } else {
          logMethod(logOutput);
        }
      }
    };
  };

  const debugLogger = createLogFunction('debug', 'üîß', 'log');
  const infoLogger = createLogFunction('info', '‚ÑπÔ∏è', 'log');
  const warnLogger = createLogFunction('warn', '‚ö†Ô∏è', 'warn');
  const errorLogger = createLogFunction('error', '‚ùå', 'error');

  console.log('üöÄ [LOGGER] createLogger Ï¥àÍ∏∞Ìôî ÏôÑÎ£å:', {
    category: defaultCategory,
    currentLogLevel: CURRENT_LOG_LEVEL,
    levelValue: LOG_LEVELS[CURRENT_LOG_LEVEL],
    timestamp: new Date().toLocaleTimeString(),
  });

  return {
    debug: debugLogger,
    info: infoLogger,
    warn: warnLogger,
    error: errorLogger,
  };
};

// Î°úÍ∑∏ Î†àÎ≤® Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§
export const getLogLevel = (): LogLevel => CURRENT_LOG_LEVEL;

export const isLogLevelEnabled = (level: LogLevel): boolean => {
  const currentLevelValue = LOG_LEVELS[CURRENT_LOG_LEVEL] ?? LOG_LEVELS.warn;
  const requestedLevelValue = LOG_LEVELS[level] ?? LOG_LEVELS.error;

  return requestedLevelValue >= currentLevelValue;
};

export type { LogLevel, LoggerInterface };
