// üìÅ blogMediaStep/hooks/useBlogMediaStepState.ts

import { useState, useEffect, useCallback, useRef } from 'react';
import { useFormContext } from 'react-hook-form';
import { useHybridImageGalleryStore } from '../../../../../../store/imageGallery/imageGalleryStore';
import type {
  FormValues,
  ToastItem,
} from '../../../../../../store/shared/commonTypes';

type StateUpdaterFunction<T> = (previousValue: T) => T;

interface UIState {
  isMobile: boolean;
}

interface SelectionState {
  selectedFileNames: string[];
}

export const useBlogMediaStepState = () => {
  const { watch, setValue, getValues } = useFormContext<FormValues>();
  const galleryStore = useHybridImageGalleryStore();

  const [syncInitialized, setSyncInitialized] = useState(false);
  const isInitializingRef = useRef(false);

  const formValues = watch();
  const { media: currentMediaFiles = [] } = formValues;

  const [uiState, setUIState] = useState<UIState>({
    isMobile: false,
  });

  const [selectionState, setSelectionState] = useState<SelectionState>({
    selectedFileNames: [],
  });

  const [toasts, setToasts] = useState<ToastItem[]>([]);

  console.log('üîß [BLOG_MEDIA_STATE] Îã®ÏàúÌôîÎêú ÏÉÅÌÉú Í¥ÄÎ¶¨ Ï¥àÍ∏∞Ìôî:', {
    currentMediaFilesCount: currentMediaFiles.length,
    syncInitialized,
    galleryStoreInitialized: galleryStore.getIsInitialized(),
    simplifiedSync: true,
    reactHookFormOnly: true,
    timestamp: new Date().toLocaleTimeString(),
  });

  useEffect(() => {
    console.log('üîç [FORM_WATCH] React Hook Form watch() Î≥ÄÍ≤Ω Í∞êÏßÄ:', {
      mediaFilesCount: currentMediaFiles.length,
      mediaFilesPreview: currentMediaFiles.map((url, index) => ({
        index,
        preview: url.slice(0, 30) + '...',
      })),
      formValuesKeys: Object.keys(formValues),
      hasMediaField: 'media' in formValues,
      mediaFieldType: typeof formValues.media,
      simplifiedSyncEnabled: true,
      timestamp: new Date().toLocaleTimeString(),
    });
  }, [currentMediaFiles, formValues]);

  useEffect(() => {
    const interval = setInterval(() => {
      const galleryImages =
        galleryStore.getImageViewConfig().selectedImages ?? [];
      const formMediaImages = getValues('media') ?? [];

      console.log('üîç [DEBUG] Ïù¥ÎØ∏ÏßÄ ÏÉÅÌÉú ÎπÑÍµê - Îã®ÏàúÌôîÎêú ÎèôÍ∏∞Ìôî:', {
        Í∞§Îü¨Î¶¨_Ïä§ÌÜ†Ïñ¥_Í∞úÏàò: galleryImages.length,
        Ìèº_Í∞úÏàò: formMediaImages.length,
        Í∞§Îü¨Î¶¨_Ïù¥ÎØ∏ÏßÄÎì§: galleryImages.map(
          (url, i) => `${i + 1}: ${url.slice(0, 20)}...`
        ),
        Ìèº_Ïù¥ÎØ∏ÏßÄÎì§: formMediaImages.map(
          (url, i) => `${i + 1}: ${url.slice(0, 20)}...`
        ),
        ÎèôÍ∏∞Ìôî_ÏÉÅÌÉú:
          galleryImages.length === formMediaImages.length
            ? '‚úÖ ÎèôÍ∏∞ÌôîÎê®'
            : '‚ùå ÎèôÍ∏∞Ìôî ÏïàÎê®',
        Îã®ÏàúÌôîÎêúÎèôÍ∏∞Ìôî: true,
        timestamp: new Date().toLocaleTimeString(),
      });
    }, 3000);

    return () => clearInterval(interval);
  }, [galleryStore, getValues]);

  useEffect(() => {
    const initializeGalleryOnce = async () => {
      const isCurrentlyInitializing = isInitializingRef.current;
      if (isCurrentlyInitializing) {
        console.log('üîÑ [GALLERY_INIT] Ïù¥ÎØ∏ Ï¥àÍ∏∞Ìôî Ï§ëÏù¥ÎØÄÎ°ú Ï§ëÎ≥µ Î∞©ÏßÄ');
        return;
      }

      const isAlreadyInitialized = syncInitialized;
      if (isAlreadyInitialized) {
        console.log('üîÑ [GALLERY_INIT] Ïù¥ÎØ∏ Ï¥àÍ∏∞Ìôî ÏôÑÎ£åÎê®');
        return;
      }

      isInitializingRef.current = true;

      try {
        console.log('üöÄ [GALLERY_INIT] Í∞§Îü¨Î¶¨ Ïä§ÌÜ†Ïñ¥ Îã®Ïàú Ï¥àÍ∏∞Ìôî ÏãúÏûë');

        const isGalleryInitialized = galleryStore.getIsInitialized();

        if (!isGalleryInitialized) {
          await galleryStore.initializeStoredImages();
          console.log('‚úÖ [GALLERY_INIT] Í∞§Îü¨Î¶¨ Ïä§ÌÜ†Ïñ¥ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
        } else {
          console.log('‚ÑπÔ∏è [GALLERY_INIT] Í∞§Îü¨Î¶¨ Ïä§ÌÜ†Ïñ¥ Ïù¥ÎØ∏ Ï¥àÍ∏∞ÌôîÎê®');
        }

        const currentGalleryImages =
          galleryStore.getImageViewConfig().selectedImages ?? [];
        const currentFormMedia = getValues('media') ?? [];

        const shouldRestoreFromGallery =
          currentGalleryImages.length > 0 && currentFormMedia.length === 0;

        if (shouldRestoreFromGallery) {
          console.log('üîÑ [GALLERY_INIT] Í∞§Îü¨Î¶¨ÏóêÏÑú ÌèºÏúºÎ°ú Îã®Ïàú Î≥µÏõê:', {
            Í∞§Îü¨Î¶¨Ïù¥ÎØ∏ÏßÄÍ∞úÏàò: currentGalleryImages.length,
            ÌèºÏù¥ÎØ∏ÏßÄÍ∞úÏàò: currentFormMedia.length,
            Î≥µÏõêÏòàÏ†ï: true,
          });

          setValue('media', currentGalleryImages, { shouldDirty: true });

          console.log('‚úÖ [GALLERY_INIT] Îã®Ïàú Î≥µÏõê ÏôÑÎ£å');
        }

        setSyncInitialized(true);
      } catch (initError) {
        console.error('‚ùå [GALLERY_INIT] Í∞§Îü¨Î¶¨ Ïä§ÌÜ†Ïñ¥ Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', {
          error: initError,
        });
      } finally {
        isInitializingRef.current = false;
      }
    };

    initializeGalleryOnce();
  }, [galleryStore, getValues, setValue, syncInitialized]);

  useEffect(() => {
    const handlePageShow = (event: PageTransitionEvent) => {
      const shouldHandlePageShow = event.persisted && syncInitialized;

      if (!shouldHandlePageShow) {
        return;
      }

      console.log('üîÑ [PAGE_SHOW] Î∏åÎùºÏö∞Ï†Ä Îí§Î°úÍ∞ÄÍ∏∞ Í∞êÏßÄ, Îã®Ïàú Î≥µÏõê ÏãúÎèÑ');

      const timeoutId = setTimeout(() => {
        const currentGalleryImages =
          galleryStore.getImageViewConfig().selectedImages ?? [];
        const currentFormMedia = getValues('media') ?? [];

        const shouldRestoreFromGallery =
          currentGalleryImages.length > 0 && currentFormMedia.length === 0;

        if (shouldRestoreFromGallery) {
          console.log('üîÑ [PAGE_SHOW] Îã®Ïàú Î≥µÏõê Ïã§Ìñâ:', {
            Í∞§Îü¨Î¶¨Ïù¥ÎØ∏ÏßÄÍ∞úÏàò: currentGalleryImages.length,
            ÌèºÏù¥ÎØ∏ÏßÄÍ∞úÏàò: currentFormMedia.length,
          });

          setValue('media', currentGalleryImages, { shouldDirty: true });
        }
      }, 500);

      return () => clearTimeout(timeoutId);
    };

    window.addEventListener('pageshow', handlePageShow);

    return () => {
      window.removeEventListener('pageshow', handlePageShow);
    };
  }, [syncInitialized, getValues, setValue, galleryStore]);

  useEffect(() => {
    const checkMobileDevice = () => {
      const userAgent = navigator.userAgent;
      const isMobileUserAgent =
        /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
          userAgent
        );
      const isTouchDevice = 'ontouchstart' in window;
      const { innerWidth } = window;
      const hasSmallScreen = innerWidth <= 768;

      const isMobileDevice =
        isMobileUserAgent || (isTouchDevice && hasSmallScreen);

      setUIState((previousState) => ({
        ...previousState,
        isMobile: isMobileDevice,
      }));

      console.log('üì± [MOBILE_CHECK] Î™®Î∞îÏùº Í∏∞Í∏∞ Í∞êÏßÄ:', {
        isMobileUserAgent,
        isTouchDevice,
        hasSmallScreen,
        isMobileDevice,
        userAgent: userAgent.slice(0, 50) + '...',
      });
    };

    checkMobileDevice();

    window.addEventListener('resize', checkMobileDevice);
    return () => window.removeEventListener('resize', checkMobileDevice);
  }, []);

  const setMediaValue = useCallback(
    (filesOrUpdater: string[] | StateUpdaterFunction<string[]>) => {
      console.log('üîç [SET_MEDIA_DEBUG] Îã®ÏàúÌôîÎêú setMediaValue Ìò∏Ï∂ú:', {
        ÏûÖÎ†•ÌÉÄÏûÖ:
          typeof filesOrUpdater === 'function' ? 'Ìï®ÏàòÌòïÏóÖÎç∞Ïù¥ÌÑ∞' : 'ÏßÅÏ†ëÎ∞∞Ïó¥',
        ÌòÑÏû¨ÌèºÍ∞úÏàò: getValues('media')?.length ?? 0,
        Îã®ÏàúÌôîÎêúÏ≤òÎ¶¨: true,
        zustandDirectUpdate: true,
        timestamp: new Date().toLocaleTimeString(),
      });

      try {
        let finalFiles: string[];

        const isUpdaterFunction = typeof filesOrUpdater === 'function';

        if (isUpdaterFunction) {
          console.log('üîç [FUNCTIONAL_UPDATE] Ìï®ÏàòÌòï ÏóÖÎç∞Ïù¥ÌÑ∞ Í∞êÏßÄ:', {
            ÏóÖÎç∞Ïù¥ÌÑ∞ÌÉÄÏûÖ: 'function',
            timestamp: new Date().toLocaleTimeString(),
          });

          const currentMediaFiles = getValues('media') ?? [];
          finalFiles = filesOrUpdater(currentMediaFiles);

          console.log('üîç [FUNCTIONAL_UPDATE] Ìï®ÏàòÌòï ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ ÏôÑÎ£å:', {
            Ïù¥Ï†ÑÌååÏùºÍ∞úÏàò: currentMediaFiles.length,
            ÏÉàÌååÏùºÍ∞úÏàò: finalFiles.length,
            Îã®ÏàúÌôîÎêúÏ≤òÎ¶¨: true,
            timestamp: new Date().toLocaleTimeString(),
          });
        } else {
          console.log('üîç [DIRECT_UPDATE] ÏßÅÏ†ë Î∞∞Ïó¥ Í∞êÏßÄ:', {
            Î∞∞Ïó¥Í∏∏Ïù¥: filesOrUpdater.length,
            timestamp: new Date().toLocaleTimeString(),
          });
          finalFiles = filesOrUpdater;
        }

        console.log('üîß [SET_MEDIA] Îã®ÏàúÌôîÎêú ÌååÏùº Ï≤òÎ¶¨ ÏãúÏûë:', {
          finalFilesCount: finalFiles.length,
          finalFilesPreview: finalFiles.map((url, index) => ({
            index,
            preview: url.slice(0, 30) + '...',
          })),
          simplifiedProcessing: true,
          directZustandUpdate: true,
          timestamp: new Date().toLocaleTimeString(),
        });

        const currentGalleryConfig = galleryStore.getImageViewConfig();

        console.log('üîÑ [DIRECT_SYNC] Zustand ÏßÅÏ†ë ÎèôÍ∏∞Ìôî ÏãúÏûë:', {
          finalFilesCount: finalFiles.length,
          currentGalleryImagesCount:
            currentGalleryConfig.selectedImages?.length ?? 0,
          simplifiedSyncEnabled: true,
          timestamp: new Date().toLocaleTimeString(),
        });

        const updatedConfig = {
          ...currentGalleryConfig,
          selectedImages: finalFiles,
        };

        galleryStore.setImageViewConfig(updatedConfig);

        console.log('‚úÖ [DIRECT_SYNC] Zustand ÏßÅÏ†ë ÎèôÍ∏∞Ìôî ÏôÑÎ£å:', {
          syncedImagesCount: finalFiles.length,
          simplifiedProcessingCompleted: true,
          timestamp: new Date().toLocaleTimeString(),
        });

        const isInitializationMethodAvailable =
          typeof galleryStore.setIsInitialized === 'function';
        if (isInitializationMethodAvailable) {
          galleryStore.setIsInitialized(true);
          console.log('üîç [STORE_DEBUG] Í∞§Îü¨Î¶¨ Ïä§ÌÜ†Ïñ¥ Ï¥àÍ∏∞Ìôî ÏÉÅÌÉú ÏÑ§Ï†ï ÏôÑÎ£å');
        }

        setValue('media', finalFiles, { shouldDirty: true });

        console.log('‚úÖ [SIMPLIFIED_SYNC] Îã®ÏàúÌôîÎêú ÎèôÍ∏∞Ìôî ÏôÑÎ£å:', {
          finalFilesCount: finalFiles.length,
          reactHookFormUpdated: true,
          zustandUpdated: true,
          noComplexCallbacks: true,
          timestamp: new Date().toLocaleTimeString(),
        });

        setTimeout(() => {
          const updatedImages =
            galleryStore.getImageViewConfig().selectedImages ?? [];
          const updatedFormMedia = getValues('media') ?? [];
          console.log('üîç [STORE_DEBUG] Îã®ÏàúÌôîÎêú ÎèôÍ∏∞Ìôî ÌõÑ ÏÉÅÌÉú:', {
            Ï†ÄÏû•ÌõÑÍ∞§Îü¨Î¶¨Í∞úÏàò: updatedImages.length,
            Ï†ÄÏû•ÌõÑÌèºÍ∞úÏàò: updatedFormMedia.length,
            Ï†ÄÏû•ÎêúÏù¥ÎØ∏ÏßÄÌîÑÎ¶¨Î∑∞: updatedImages.map(
              (url, i) => `${i + 1}: ${url.slice(0, 30)}...`
            ),
            Ï†ÄÏû•ÎêúÌèºÏù¥ÎØ∏ÏßÄÌîÑÎ¶¨Î∑∞: updatedFormMedia.map(
              (url, i) => `${i + 1}: ${url.slice(0, 30)}...`
            ),
            ÎèôÍ∏∞ÌôîÏÉÅÌÉú:
              updatedImages.length === updatedFormMedia.length
                ? '‚úÖ ÎèôÍ∏∞ÌôîÎê®'
                : '‚ùå ÎèôÍ∏∞Ìôî ÏïàÎê®',
            simplifiedSyncWorking: true,
            timestamp: new Date().toLocaleTimeString(),
          });
        }, 100);
      } catch (syncError) {
        console.error('‚ùå [SIMPLIFIED_SYNC] Îã®ÏàúÌôîÎêú ÎèôÍ∏∞Ìôî Ïã§Ìå®:', {
          error: syncError,
          timestamp: new Date().toLocaleTimeString(),
        });
      }
    },
    [galleryStore, getValues, setValue]
  );

  const setMainImageValue = useCallback(
    (imageUrl: string) => {
      console.log('üîß [SET_MAIN_IMAGE] setMainImageValue Ìò∏Ï∂ú:', {
        imageUrlPreview: imageUrl ? imageUrl.slice(0, 30) + '...' : 'none',
        timestamp: new Date().toLocaleTimeString(),
      });

      setValue('mainImage', imageUrl, { shouldDirty: true });
    },
    [setValue]
  );

  const setSelectedFileNames = useCallback(
    (namesOrUpdater: string[] | StateUpdaterFunction<string[]>) => {
      console.log('üîß [SET_NAMES_DEBUG] Îã®ÏàúÌôîÎêú setSelectedFileNames Ìò∏Ï∂ú:', {
        ÏûÖÎ†•ÌÉÄÏûÖ:
          typeof namesOrUpdater === 'function' ? 'Ìï®ÏàòÌòïÏóÖÎç∞Ïù¥ÌÑ∞' : 'ÏßÅÏ†ëÎ∞∞Ïó¥',
        ÌòÑÏû¨ÌååÏùºÎ™ÖÍ∞úÏàò: selectionState.selectedFileNames.length,
        simplifiedProcessing: true,
        timestamp: new Date().toLocaleTimeString(),
      });

      try {
        let finalNames: string[];

        const isUpdaterFunction = typeof namesOrUpdater === 'function';

        if (isUpdaterFunction) {
          console.log('üîç [FUNCTIONAL_UPDATE] ÌååÏùºÎ™Ö Ìï®ÏàòÌòï ÏóÖÎç∞Ïù¥ÌÑ∞ Í∞êÏßÄ:', {
            ÏóÖÎç∞Ïù¥ÌÑ∞ÌÉÄÏûÖ: 'function',
            Ïù¥Ï†ÑÌååÏùºÎ™ÖÍ∞úÏàò: selectionState.selectedFileNames.length,
            timestamp: new Date().toLocaleTimeString(),
          });

          finalNames = namesOrUpdater(selectionState.selectedFileNames);

          console.log('üîç [FUNCTIONAL_UPDATE] ÌååÏùºÎ™Ö Ìï®ÏàòÌòï ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å:', {
            Ïù¥Ï†ÑÌååÏùºÎ™ÖÍ∞úÏàò: selectionState.selectedFileNames.length,
            ÏÉàÌååÏùºÎ™ÖÍ∞úÏàò: finalNames.length,
            simplifiedProcessing: true,
            timestamp: new Date().toLocaleTimeString(),
          });
        } else {
          console.log('üîç [DIRECT_UPDATE] ÌååÏùºÎ™Ö ÏßÅÏ†ë Î∞∞Ïó¥ Í∞êÏßÄ:', {
            Î∞∞Ïó¥Í∏∏Ïù¥: namesOrUpdater.length,
            timestamp: new Date().toLocaleTimeString(),
          });
          finalNames = namesOrUpdater;
        }

        console.log('üîß [SET_NAMES] Îã®ÏàúÌôîÎêú ÌååÏùºÎ™Ö Ï≤òÎ¶¨:', {
          finalNamesCount: finalNames.length,
          finalNamesPreview: finalNames.slice(0, 3),
          simplifiedProcessingEnabled: true,
          timestamp: new Date().toLocaleTimeString(),
        });

        setSelectionState((previousState) => ({
          ...previousState,
          selectedFileNames: finalNames,
        }));

        console.log('‚úÖ [SET_NAMES] ÌååÏùºÎ™Ö ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å:', {
          updatedNamesCount: finalNames.length,
          simplifiedProcessingCompleted: true,
          timestamp: new Date().toLocaleTimeString(),
        });
      } catch (updateError) {
        console.error('‚ùå [SET_NAMES] ÌååÏùºÎ™Ö ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', {
          error: updateError,
          timestamp: new Date().toLocaleTimeString(),
        });
      }
    },
    [selectionState.selectedFileNames]
  );

  const addToast = useCallback((toast: Omit<ToastItem, 'id' | 'createdAt'>) => {
    const currentTimestamp = Date.now();
    const newToast: ToastItem = {
      ...toast,
      id: currentTimestamp.toString(),
      createdAt: new Date(),
    };

    setToasts((previousToasts) => [...previousToasts, newToast]);

    const timeoutId = setTimeout(() => {
      setToasts((previousToasts) =>
        previousToasts.filter(({ id }) => id !== newToast.id)
      );
    }, 5000);

    return () => clearTimeout(timeoutId);
  }, []);

  const removeToast = useCallback((toastId: string) => {
    setToasts((previousToasts) =>
      previousToasts.filter(({ id }) => id !== toastId)
    );
  }, []);

  const forceSync = useCallback(() => {
    const currentGalleryImages =
      galleryStore.getImageViewConfig().selectedImages ?? [];
    const currentFormMedia = getValues('media') ?? [];

    console.log('üîß [FORCE_SYNC] Îã®ÏàúÌôîÎêú Í∞ïÏ†ú ÎèôÍ∏∞Ìôî Ïã§Ìñâ:', {
      galleryCount: currentGalleryImages.length,
      formCount: currentFormMedia.length,
      simplifiedSyncEnabled: true,
    });

    const shouldSyncFromGalleryToForm =
      currentGalleryImages.length > currentFormMedia.length;
    const shouldSyncFromFormToGallery =
      currentFormMedia.length > currentGalleryImages.length;

    if (shouldSyncFromGalleryToForm) {
      console.log('üîÑ [FORCE_SYNC] Í∞§Îü¨Î¶¨ ‚Üí Ìèº ÎèôÍ∏∞Ìôî');
      setValue('media', currentGalleryImages, { shouldDirty: true });
    } else if (shouldSyncFromFormToGallery) {
      console.log('üîÑ [FORCE_SYNC] Ìèº ‚Üí Í∞§Îü¨Î¶¨ ÎèôÍ∏∞Ìôî');
      const updatedConfig = {
        ...galleryStore.getImageViewConfig(),
        selectedImages: currentFormMedia,
      };
      galleryStore.setImageViewConfig(updatedConfig);
    } else {
      console.log('‚ÑπÔ∏è [FORCE_SYNC] Ïù¥ÎØ∏ ÎèôÍ∏∞ÌôîÎêú ÏÉÅÌÉú');
    }
  }, [getValues, galleryStore, setValue]);

  console.log('‚úÖ [BLOG_MEDIA_STATE] Îã®ÏàúÌôîÎêú ÏÉÅÌÉú Í¥ÄÎ¶¨ Î∞òÌôò Ï§ÄÎπÑ:', {
    formValuesKeys: Object.keys(formValues),
    currentMediaFilesCount: currentMediaFiles.length,
    uiStateMobile: uiState.isMobile,
    selectionStateFileNames: selectionState.selectedFileNames.length,
    toastsCount: toasts.length,
    syncInitialized,
    hasGalleryStore: galleryStore !== null && galleryStore !== undefined,
    simplifiedSyncEnabled: true,
    noComplexCallbacks: true,
    timestamp: new Date().toLocaleTimeString(),
  });

  return {
    formValues,
    uiState,
    selectionState,
    toasts,

    setMediaValue,
    setMainImageValue,
    setSelectedFileNames,
    addToast,
    removeToast,

    imageGalleryStore: galleryStore,
    syncInitialized,

    forceSync,
  };
};
